Got you! I’ll break everything down step by step.  

### **📌 Step 1: Go to Firebase Website**  
1. Open [Firebase](https://firebase.google.com/) → Click **"Get Started"**.  
2. Sign in with your **Google account** (if you don’t have one, create it).  

---

### **📌 Step 2: Create a Firebase Project**  
1. Click **"Create a project"**.  
2. Enter a **Project Name** (e.g., "MyWebsiteDB") → Click **Continue**.  
3. **Disable Google Analytics** (you don’t need it) → Click **Create Project**.  
4. Wait a few seconds, then click **"Continue"** when it’s ready.  

---

### **📌 Step 3: Set Up Firestore Database**  
1. In the Firebase dashboard, click **"Build"** (left menu) → **"Firestore Database"**.  
2. Click **"Create Database"**.  
3. Choose **"Start in test mode"** (so you can add data without restrictions).  
4. Select your **region** (choose the closest to your audience) → Click **Enable**.  
5. Now, your database is ready!  

---

### **📌 Step 4: Add Firebase to Your Website**  
1. In Firebase, go to **Project Settings** (⚙️ icon on the left).  
2. Scroll down and click **"Add app"** → Select **Web** (</>).  
3. Give your app a name (e.g., "My Website") → Click **Register app**.  
4. Firebase will show **your configuration code**. Copy it (you’ll use it soon).  

---

### **📌 Step 5: Add Firebase to Your GitHub Pages Website**  
1. Open your **GitHub Pages project** and find your **index.html** file.  
2. Inside **index.html**, paste the Firebase config inside the `<script>` tag:  

```html
<!-- Add Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js"></script>

<script>
  // Your Firebase config (from Step 4)
  const firebaseConfig = {
    apiKey: "YOUR_API_KEY",
    authDomain: "YOUR_PROJECT.firebaseapp.com",
    projectId: "YOUR_PROJECT_ID",
    storageBucket: "YOUR_PROJECT.appspot.com",
    messagingSenderId: "YOUR_SENDER_ID",
    appId: "YOUR_APP_ID"
  };

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();
</script>
```
🔹 **Replace** `"YOUR_API_KEY"`, `"YOUR_PROJECT_ID"`, etc., with your actual Firebase config from Step 4.  

---

### **📌 Step 6: Create a Contact Form**  
In your **index.html**, add a form inside the `<body>` tag:  

```html
<form id="contactForm">
  <input type="text" id="name" placeholder="Your Name" required>
  <input type="email" id="email" placeholder="Your Email" required>
  <button type="submit">Submit</button>
</form>
```

Now, **below** the Firebase `<script>`, add this **JavaScript code** to send data to Firestore:  

```html
<script>
  document.getElementById('contactForm').addEventListener('submit', function(e) {
    e.preventDefault();

    let name = document.getElementById('name').value;
    let email = document.getElementById('email').value;

    db.collection("submissions").add({
      name: name,
      email: email,
      timestamp: firebase.firestore.FieldValue.serverTimestamp()
    }).then(() => {
      alert("Submitted Successfully!");
      document.getElementById('contactForm').reset();
    }).catch(error => {
      console.error("Error writing document: ", error);
    });
  });
</script>
```

---

### **📌 Step 7: Deploy Your Website on GitHub Pages**  
1. Save your changes and push them to **GitHub**.  
2. If your site is already live on GitHub Pages, refresh it and test the form.  
3. Enter a name and email, click **Submit**, and check **Firestore in Firebase Console**.  
4. If you see the submitted data in Firebase → 🎉 **Success!**  

---

### **📌 Next Steps (Optional But Recommended)**  
🔹 **Secure Your Database** – Right now, anyone can write data. Later, set **Firestore security rules** to limit access.  
🔹 **Display Submitted Data on Your Website** – You can fetch and show form submissions on your site.  
🔹 **Email Notifications** – Use Firebase Functions (advanced) or n8n to send an email when a form is submitted.  

---

🚀 **Now Your Website Can Collect Data for Free Forever!**  
Try this setup and let me know if anything breaks or needs fixing.